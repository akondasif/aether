package roart.config;

import java.util.HashMap;
import java.util.Map;

public class ConfigConstantMaps {
    public static Map<String, Class> map = new HashMap();

    public static void makeTypeMap() {
        if (!map.isEmpty()) {
            return;
        }

        map.put(ConfigConstants.FS, String.class);
        map.put(ConfigConstants.LOCAL, String.class);
        map.put(ConfigConstants.HADOOP, String.class);
        map.put(ConfigConstants.SWIFT, String.class);
        map.put(ConfigConstants.INDEX, String.class);
        map.put(ConfigConstants.SEARCHENGINESOLR, Boolean.class);
        map.put(ConfigConstants.SEARCHENGINELUCENE, Boolean.class);
        map.put(ConfigConstants.SEARCHENGINEELASTIC, Boolean.class);
        map.put(ConfigConstants.DB, String.class);
        map.put(ConfigConstants.LOCALHOST, String.class);
        map.put(ConfigConstants.DATABASEHBASE, Boolean.class);
        map.put(ConfigConstants.DATABASEHIBERNATE, Boolean.class);
        map.put(ConfigConstants.DATABASEHIBERNATEH2DIR, String.class);
        map.put(ConfigConstants.NODECLASSIFY, Boolean.class);
        map.put(ConfigConstants.MACHINELEARNINGMAHOUT, Boolean.class);
        map.put(ConfigConstants.MACHINELEARNINGMAHOUTSPARK, Boolean.class);
        map.put(ConfigConstants.MACHINELEARNINGMAHOUTSPARKMAHOUTSPARKMASTER, String.class);
        map.put(ConfigConstants.MACHINELEARNINGOPENNLP, Boolean.class);
        map.put(ConfigConstants.GUIDOWNLOADER, Boolean.class);
        map.put(ConfigConstants.GUIAUTHENTICATE, Boolean.class);
        map.put(ConfigConstants.INDEXFAILEDLIMIT, Integer.class);
        map.put(ConfigConstants.MACHINELEARNINGMAHOUTMAHOUTMODELPATH, String.class);
        map.put(ConfigConstants.MACHINELEARNINGMAHOUTMAHOUTLABELINDEXFILEPATH, String.class);
        map.put(ConfigConstants.MACHINELEARNINGMAHOUTMAHOUTDICTIONARYPATH, String.class);
        map.put(ConfigConstants.MACHINELEARNINGMAHOUTMAHOUTDOCUMENTFREQUENCYPATH, String.class);
        map.put(ConfigConstants.MACHINELEARNINGMAHOUTMAHOUTBASEPATH, String.class);
        map.put(ConfigConstants.MACHINELEARNINGMAHOUTMAHOUTALGORITHM, String.class);
        map.put(ConfigConstants.MACHINELEARNINGMAHOUTMAHOUTCONFFS, String.class);
        map.put(ConfigConstants.MACHINELEARNINGMAHOUTSPARKMAHOUTMODELPATH, String.class);
        map.put(ConfigConstants.MACHINELEARNINGMAHOUTSPARKMAHOUTLABELINDEXFILEPATH, String.class);
        map.put(ConfigConstants.MACHINELEARNINGMAHOUTSPARKMAHOUTDICTIONARYPATH, String.class);
        map.put(ConfigConstants.MACHINELEARNINGMAHOUTSPARKMAHOUTDOCUMENTFREQUENCYPATH, String.class);
        map.put(ConfigConstants.MACHINELEARNINGMAHOUTSPARKMAHOUTBASEPATH, String.class);
        map.put(ConfigConstants.MACHINELEARNINGMAHOUTSPARKMAHOUTALGORITHM, String.class);
        map.put(ConfigConstants.MACHINELEARNINGMAHOUTSPARKMAHOUTCONFFS, String.class);
        map.put(ConfigConstants.BAYES, String.class);
        map.put(ConfigConstants.CBAYES, String.class);
        map.put(ConfigConstants.MACHINELEARNINGSPARKML, Boolean.class);
        map.put(ConfigConstants.MACHINELEARNINGSPARKMLSPARKMLBASEPATH, String.class);
        map.put(ConfigConstants.MACHINELEARNINGSPARKMLSPARKMLMODELPATH, String.class);
        map.put(ConfigConstants.MACHINELEARNINGSPARKMLSPARKMLLABELINDEXPATH, String.class);
        map.put(ConfigConstants.MACHINELEARNINGSPARKMLSPARKMASTER, String.class);
        map.put(ConfigConstants.MACHINELEARNINGOPENNLPOPENNLPMODELPATH, String.class);
        map.put(ConfigConstants.SEARCHENGINESOLRSOLRURL, String.class);
        map.put(ConfigConstants.SEARCHENGINEELASTICELASTICHOST, String.class);
        map.put(ConfigConstants.SEARCHENGINEELASTICELASTICPORT, String.class);
        map.put(ConfigConstants.FILESYSTEMHDFS, Boolean.class);
        map.put(ConfigConstants.FILESYSTEMHDFSHDFSCONFFS, String.class);
        map.put(ConfigConstants.FILESYSTEMSWIFT, Boolean.class);
        map.put(ConfigConstants.FILESYSTEMSWIFTSWIFTCONFURL, String.class);
        map.put(ConfigConstants.FILESYSTEMSWIFTSWIFTCONFUSER, String.class);
        map.put(ConfigConstants.FILESYSTEMSWIFTSWIFTCONFKEY, String.class);
        map.put(ConfigConstants.FILESYSTEMSWIFTSWIFTCONFCONTAINER, String.class);
        map.put(ConfigConstants.DATABASEHBASEHBASEQUORUM, String.class);
        map.put(ConfigConstants.DATABASEHBASEHBASEPORT, String.class);
        map.put(ConfigConstants.DATABASEHBASEHBASEMASTER, String.class);
        map.put(ConfigConstants.NODE, String.class);
        map.put(ConfigConstants.NODENODENAME, String.class);
        map.put(ConfigConstants.FSDATADIR, String.class);
        map.put(ConfigConstants.FSHOMEDIR, String.class);
        map.put(ConfigConstants.FSLOGDIR, String.class);
        map.put(ConfigConstants.FSDIRLIST, String.class);
        map.put(ConfigConstants.FSDIRLISTNOT, String.class);
        map.put(ConfigConstants.INDEXREINDEXLIMIT, Integer.class);
        map.put(ConfigConstants.INDEXINDEXLIMIT, Integer.class);
        map.put(ConfigConstants.CONVERSIONTIKATIMEOUT, Integer.class);
        map.put(ConfigConstants.CONVERSTIONOTHERTIMEOUT, Integer.class);
        map.put(ConfigConstants.DATABASEDATANUCLEUS, Boolean.class);
        map.put(ConfigConstants.SYNCHRONIZATIONZOOKEEPER, String.class);
        map.put(ConfigConstants.GUIHIGHLIGHTMLT, Boolean.class);
        map.put(ConfigConstants.NODELANGUAGES, String.class);
        map.put(ConfigConstants.SEARCHENGINEMLTMLTCOUNT, Integer.class);
        map.put(ConfigConstants.SEARCHENGINEMLTMLTMINDF, Integer.class);
        map.put(ConfigConstants.SEARCHENGINEMLTMLTMINTF, Integer.class);
        map.put(ConfigConstants.SYNCHRONIZATIONDISTRIBUTEDLOCKMODEBIG, Boolean.class);
        map.put(ConfigConstants.SMALL, Boolean.class);
        map.put(ConfigConstants.BIG, Boolean.class);
        map.put(ConfigConstants.SYNCHRONIZATIONDISTRIBUTEDPROCESS, Boolean.class);
        map.put(ConfigConstants.CONFIG, String.class);
        map.put(ConfigConstants.SEARCHENGINELUCENELUCENEPATH, String.class);
    }

    public static Map<String, Object> deflt = new HashMap();
    public static void makeDefaultMap() {
        if (!deflt.isEmpty()) {
            return;
        }

        deflt.put(ConfigConstants.FS, null);
        deflt.put(ConfigConstants.LOCAL, null);
        deflt.put(ConfigConstants.HADOOP, null);
        deflt.put(ConfigConstants.SWIFT, null);
        deflt.put(ConfigConstants.INDEX, null);
        deflt.put(ConfigConstants.SEARCHENGINESOLR, Boolean.FALSE);
        deflt.put(ConfigConstants.SEARCHENGINELUCENE, Boolean.TRUE);
        deflt.put(ConfigConstants.SEARCHENGINEELASTIC, Boolean.FALSE);
        deflt.put(ConfigConstants.DB, null);
        deflt.put(ConfigConstants.LOCALHOST, null);
        deflt.put(ConfigConstants.DATABASEHBASE, Boolean.FALSE);
        deflt.put(ConfigConstants.DATABASEHIBERNATE, Boolean.TRUE);
        deflt.put(ConfigConstants.DATABASEHIBERNATEH2DIR, "");
        deflt.put(ConfigConstants.NODECLASSIFY, Boolean.FALSE);
        deflt.put(ConfigConstants.MACHINELEARNINGMAHOUT, Boolean.FALSE);
        deflt.put(ConfigConstants.MACHINELEARNINGMAHOUTSPARK, Boolean.FALSE);
        deflt.put(ConfigConstants.MACHINELEARNINGMAHOUTSPARKMAHOUTSPARKMASTER, "spark://127.0.0.1:7077"); 
        deflt.put(ConfigConstants.MACHINELEARNINGOPENNLP, Boolean.FALSE);
        deflt.put(ConfigConstants.GUIDOWNLOADER, Boolean.TRUE);
        deflt.put(ConfigConstants.GUIAUTHENTICATE, Boolean.FALSE);
        deflt.put(ConfigConstants.INDEXFAILEDLIMIT, 0);
        deflt.put(ConfigConstants.MACHINELEARNINGMAHOUTMAHOUTBASEPATH, null);
        deflt.put(ConfigConstants.MACHINELEARNINGMAHOUTMAHOUTMODELPATH, "");
        deflt.put(ConfigConstants.MACHINELEARNINGMAHOUTMAHOUTLABELINDEXFILEPATH, "");
        deflt.put(ConfigConstants.MACHINELEARNINGMAHOUTMAHOUTDICTIONARYPATH, "");
        deflt.put(ConfigConstants.MACHINELEARNINGMAHOUTMAHOUTDOCUMENTFREQUENCYPATH, "");
        deflt.put(ConfigConstants.MACHINELEARNINGMAHOUTMAHOUTALGORITHM, "bayes");
        deflt.put(ConfigConstants.MACHINELEARNINGMAHOUTMAHOUTCONFFS, "");
        deflt.put(ConfigConstants.MACHINELEARNINGMAHOUTSPARKMAHOUTBASEPATH, null);
        deflt.put(ConfigConstants.MACHINELEARNINGMAHOUTSPARKMAHOUTMODELPATH, "");
        deflt.put(ConfigConstants.MACHINELEARNINGMAHOUTSPARKMAHOUTLABELINDEXFILEPATH, "");
        deflt.put(ConfigConstants.MACHINELEARNINGMAHOUTSPARKMAHOUTDICTIONARYPATH, "");
        deflt.put(ConfigConstants.MACHINELEARNINGMAHOUTSPARKMAHOUTDOCUMENTFREQUENCYPATH, "");
        deflt.put(ConfigConstants.MACHINELEARNINGMAHOUTSPARKMAHOUTALGORITHM, "bayes");
        deflt.put(ConfigConstants.MACHINELEARNINGMAHOUTSPARKMAHOUTCONFFS, "");
        deflt.put(ConfigConstants.BAYES, "");
        deflt.put(ConfigConstants.CBAYES, "");
        deflt.put(ConfigConstants.MACHINELEARNINGSPARKML, Boolean.FALSE);
        deflt.put(ConfigConstants.MACHINELEARNINGSPARKMLSPARKMLBASEPATH, "");
        deflt.put(ConfigConstants.MACHINELEARNINGSPARKMLSPARKMLMODELPATH, "");
        deflt.put(ConfigConstants.MACHINELEARNINGSPARKMLSPARKMLLABELINDEXPATH, ""); 
        deflt.put(ConfigConstants.MACHINELEARNINGSPARKMLSPARKMASTER, "");
        deflt.put(ConfigConstants.MACHINELEARNINGOPENNLPOPENNLPMODELPATH, ""); 
        deflt.put(ConfigConstants.SEARCHENGINESOLRSOLRURL, "");
        deflt.put(ConfigConstants.SEARCHENGINEELASTICELASTICHOST, "localhost");
        deflt.put(ConfigConstants.SEARCHENGINEELASTICELASTICPORT, "9300");
        deflt.put(ConfigConstants.FILESYSTEMHDFS, Boolean.FALSE);
        deflt.put(ConfigConstants.FILESYSTEMHDFSHDFSCONFFS, "");
        deflt.put(ConfigConstants.FILESYSTEMSWIFT, Boolean.FALSE);
        deflt.put(ConfigConstants.FILESYSTEMSWIFTSWIFTCONFURL, "");
        deflt.put(ConfigConstants.FILESYSTEMSWIFTSWIFTCONFUSER, "");
        deflt.put(ConfigConstants.FILESYSTEMSWIFTSWIFTCONFKEY, "");
        deflt.put(ConfigConstants.FILESYSTEMSWIFTSWIFTCONFCONTAINER, "");
        deflt.put(ConfigConstants.DATABASEHBASEHBASEQUORUM, "localhost");
        deflt.put(ConfigConstants.DATABASEHBASEHBASEPORT, "2181");
        deflt.put(ConfigConstants.DATABASEHBASEHBASEMASTER, "localhost:2181");
        deflt.put(ConfigConstants.NODE, null);
        deflt.put(ConfigConstants.NODENODENAME, "localhost");
        deflt.put(ConfigConstants.FSDATADIR, "");
        deflt.put(ConfigConstants.FSHOMEDIR, "");
        deflt.put(ConfigConstants.FSLOGDIR, "");
        deflt.put(ConfigConstants.FSDIRLIST, "");
        deflt.put(ConfigConstants.FSDIRLISTNOT, "");
        deflt.put(ConfigConstants.INDEXREINDEXLIMIT, 0);
        deflt.put(ConfigConstants.INDEXINDEXLIMIT, 0);
        deflt.put(ConfigConstants.CONVERSIONTIKATIMEOUT, 600);
        deflt.put(ConfigConstants.CONVERSTIONOTHERTIMEOUT, 600);
        deflt.put(ConfigConstants.DATABASEDATANUCLEUS, Boolean.FALSE);
        deflt.put(ConfigConstants.SYNCHRONIZATIONZOOKEEPER, null);
        deflt.put(ConfigConstants.GUIHIGHLIGHTMLT, Boolean.TRUE);
        deflt.put(ConfigConstants.NODELANGUAGES, "en");
        deflt.put(ConfigConstants.SEARCHENGINEMLTMLTCOUNT, 10);
        deflt.put(ConfigConstants.SEARCHENGINEMLTMLTMINDF, 5);
        deflt.put(ConfigConstants.SEARCHENGINEMLTMLTMINTF, 2);
        deflt.put(ConfigConstants.SYNCHRONIZATIONDISTRIBUTEDLOCKMODEBIG, Boolean.TRUE);
        deflt.put(ConfigConstants.SMALL, Boolean.FALSE);
        deflt.put(ConfigConstants.BIG, Boolean.FALSE);
        deflt.put(ConfigConstants.SYNCHRONIZATIONDISTRIBUTEDPROCESS, Boolean.FALSE);
        deflt.put(ConfigConstants.CONFIG, "");
        deflt.put(ConfigConstants.SEARCHENGINELUCENELUCENEPATH, "/tmp");
    }

    public static Map<String, String> text = new HashMap();

    public static void makeTextMap() {
        if (!text.isEmpty()) {
            return;
        }

        text.put(ConfigConstants.FS, "Filesystem");
        text.put(ConfigConstants.LOCAL, "");
        text.put(ConfigConstants.HADOOP, "");
        text.put(ConfigConstants.SWIFT, "");
        text.put(ConfigConstants.INDEX, "");
        text.put(ConfigConstants.SEARCHENGINESOLR, "Use Solr");
        text.put(ConfigConstants.SEARCHENGINELUCENE, "Use Lucene");
        text.put(ConfigConstants.SEARCHENGINEELASTIC, "Use Elastic");
        text.put(ConfigConstants.DB, "Database");
        text.put(ConfigConstants.LOCALHOST, "");
        text.put(ConfigConstants.DATABASEHBASE, "");
        text.put(ConfigConstants.DATABASEHIBERNATE, "");
        text.put(ConfigConstants.DATABASEHIBERNATE, "Hibernate H2 directory");
        text.put(ConfigConstants.NODECLASSIFY, "Use classifier ML");
        text.put(ConfigConstants.MACHINELEARNINGMAHOUT, "");
        text.put(ConfigConstants.MACHINELEARNINGMAHOUTSPARK, "");
        text.put(ConfigConstants.MACHINELEARNINGMAHOUTSPARKMAHOUTSPARKMASTER, "Mahout Spark master");
        text.put(ConfigConstants.MACHINELEARNINGOPENNLP, "Machine learning OpenNLP");
        text.put(ConfigConstants.GUIDOWNLOADER, "Use downloader");
        text.put(ConfigConstants.GUIAUTHENTICATE, "Use login");
        text.put(ConfigConstants.INDEXFAILEDLIMIT, "Limit for failed indexing per unit");
        text.put(ConfigConstants.MACHINELEARNINGMAHOUTMAHOUTBASEPATH, "Mahout base path");
        text.put(ConfigConstants.MACHINELEARNINGMAHOUTMAHOUTMODELPATH, "Mahout model path");
        text.put(ConfigConstants.MACHINELEARNINGMAHOUTMAHOUTLABELINDEXFILEPATH, "Mahout labelindex filepath");
        text.put(ConfigConstants.MACHINELEARNINGMAHOUTMAHOUTDICTIONARYPATH, "Mahout dictionary path");
        text.put(ConfigConstants.MACHINELEARNINGMAHOUTMAHOUTDOCUMENTFREQUENCYPATH, "Mahout document frequency path");
        text.put(ConfigConstants.MACHINELEARNINGMAHOUTMAHOUTALGORITHM, "Mahout algorithm");
        text.put(ConfigConstants.MACHINELEARNINGMAHOUTMAHOUTCONFFS, "Mahout conf fs");
        text.put(ConfigConstants.MACHINELEARNINGMAHOUTSPARKMAHOUTBASEPATH, "Mahout spark base path");
        text.put(ConfigConstants.MACHINELEARNINGMAHOUTSPARKMAHOUTMODELPATH, "Mahout spark model path");
        text.put(ConfigConstants.MACHINELEARNINGMAHOUTSPARKMAHOUTLABELINDEXFILEPATH, "Mahout spark labelindex filepath");
        text.put(ConfigConstants.MACHINELEARNINGMAHOUTSPARKMAHOUTDICTIONARYPATH, "Mahout spark dictionary path");
        text.put(ConfigConstants.MACHINELEARNINGMAHOUTSPARKMAHOUTDOCUMENTFREQUENCYPATH, "Mahout spark document frequency path");
        text.put(ConfigConstants.MACHINELEARNINGMAHOUTSPARKMAHOUTALGORITHM, "Mahout spark algorithm");
        text.put(ConfigConstants.MACHINELEARNINGMAHOUTSPARKMAHOUTCONFFS, "Mahout spark conf fs");
        text.put(ConfigConstants.BAYES, "");
        text.put(ConfigConstants.CBAYES, "");
        text.put(ConfigConstants.MACHINELEARNINGSPARKML, "Spark ML");
        text.put(ConfigConstants.MACHINELEARNINGSPARKMLSPARKMLBASEPATH, "Spark ML base path");
        text.put(ConfigConstants.MACHINELEARNINGSPARKMLSPARKMLMODELPATH, "Spark ML model path");
        text.put(ConfigConstants.MACHINELEARNINGSPARKMLSPARKMLLABELINDEXPATH, "Spark ML labelindex path");
        text.put(ConfigConstants.MACHINELEARNINGSPARKMLSPARKMASTER, "Spark ML master");
        text.put(ConfigConstants.MACHINELEARNINGOPENNLPOPENNLPMODELPATH, "OpenNLP model path");
        text.put(ConfigConstants.SEARCHENGINESOLRSOLRURL, "Solr URL");
        text.put(ConfigConstants.SEARCHENGINEELASTICELASTICHOST, "Elastic host");
        text.put(ConfigConstants.SEARCHENGINEELASTICELASTICPORT, "Elastic port");
        text.put(ConfigConstants.FILESYSTEMHDFS, "Use HDFS");
        text.put(ConfigConstants.FILESYSTEMHDFSHDFSCONFFS, "HDFS fs path");
        text.put(ConfigConstants.FILESYSTEMSWIFT, "Use Swift");
        text.put(ConfigConstants.FILESYSTEMSWIFTSWIFTCONFURL, "Swift url");
        text.put(ConfigConstants.FILESYSTEMSWIFTSWIFTCONFUSER, "Swift user");
        text.put(ConfigConstants.FILESYSTEMSWIFTSWIFTCONFKEY, "Swift key");
        text.put(ConfigConstants.FILESYSTEMSWIFTSWIFTCONFCONTAINER, "Swift containter");
        text.put(ConfigConstants.DATABASEHBASEHBASEQUORUM, "HBase quorum");
        text.put(ConfigConstants.DATABASEHBASEHBASEPORT, "HBase port");
        text.put(ConfigConstants.DATABASEHBASEHBASEMASTER, "HBase master");
        text.put(ConfigConstants.NODE, "Node");
        text.put(ConfigConstants.NODENODENAME, "Nodename");
        text.put(ConfigConstants.FSDATADIR, "Filesystem data dir");
        text.put(ConfigConstants.FSHOMEDIR, "Filesystem home dir");
        text.put(ConfigConstants.FSLOGDIR, "Filesystem log dir");
        text.put(ConfigConstants.FSDIRLIST, "Filesystem dirs");
        text.put(ConfigConstants.FSDIRLISTNOT, "Filesystem exclude dirs");
        text.put(ConfigConstants.INDEXREINDEXLIMIT, "Reindex limit");
        text.put(ConfigConstants.INDEXINDEXLIMIT, "Index limit");
        text.put(ConfigConstants.CONVERSIONTIKATIMEOUT, "Tika timeout");
        text.put(ConfigConstants.CONVERSTIONOTHERTIMEOUT, "Other conversion timeout");
        text.put(ConfigConstants.DATABASEDATANUCLEUS, "Use datanucleus");
        text.put(ConfigConstants.SYNCHRONIZATIONZOOKEEPER, "Use zookeeper");
        text.put(ConfigConstants.GUIHIGHLIGHTMLT, "Highlight MLT");
        text.put(ConfigConstants.NODELANGUAGES, "languages");
        text.put(ConfigConstants.SEARCHENGINEMLTMLTCOUNT, "MLT count");
        text.put(ConfigConstants.SEARCHENGINEMLTMLTMINDF, "Min DF");
        text.put(ConfigConstants.SEARCHENGINEMLTMLTMINTF, "Min TF");
        text.put(ConfigConstants.SYNCHRONIZATIONDISTRIBUTEDLOCKMODEBIG, "Distributed lock mode");
        text.put(ConfigConstants.SMALL, "Small lock mode");
        text.put(ConfigConstants.BIG, "Big lock mode");
        text.put(ConfigConstants.SYNCHRONIZATIONDISTRIBUTEDPROCESS, "Distributed processing");
        text.put(ConfigConstants.CONFIG, "");
        text.put(ConfigConstants.SEARCHENGINELUCENELUCENEPATH, "Lucene path");
    }
}

